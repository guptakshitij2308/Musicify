import { RequestHandler } from "express";
import { isValidObjectId, PipelineStage, Types } from "mongoose";
import User from "#/models/user";
import { paginationQuery } from "#/@types/misc";
import Audio from "#/models/audio";
import Playlist from "#/models/playlist";
import History from "#/models/history";
import moment from "moment";
import { getUsersPreviousHistory } from "#/utils/helper";
import AutoGeneratedPlaylist from "#/models/autoGeneratedPlaylist";

export const updateFollower: RequestHandler = async (req, res) => {
  const { profileId } = req.params;

  const userId = req.user.id;
  let status: "added" | "removed";

  if (!isValidObjectId(profileId)) {
    return res.status(422).json({ message: "Invalid profile id!" });
  }

  const userToFollow = await User.findById(profileId);

  if (!userToFollow) {
    return res.status(404).json({ message: "Profile not found!" });
  }

  const alreadyAFollower = await User.findOne({
    _id: profileId,
    followers: userId,
  });
  if (alreadyAFollower) {
    // unfollow
    await User.updateOne(
      { _id: userToFollow._id },
      {
        $pull: { followers: userId },
      }
    );

    await User.updateOne(
      { _id: userId },
      {
        $pull: { followings: profileId },
      }
    );

    status = "removed";
  } else {
    await User.updateOne(
      { _id: userToFollow._id },
      {
        $addToSet: { followers: userId },
      }
    );
    await User.updateOne(
      { _id: userId },
      {
        $addToSet: { followings: userToFollow },
      }
    );
    status = "added";
  }

  return res.json({ status });
};

export const getUploads: RequestHandler = async (req, res) => {
  const { page = "0", limit = "20" } = req.query as paginationQuery;
  const userId = req.user.id;

  const data = await Audio.find({ owner: userId })
    .skip(+page * +limit)
    .limit(+limit)
    .sort({ createdAt: -1 });

  const audios = data.map((audio) => {
    return {
      id: audio._id,
      title: audio.title,
      about: audio.about,
      file: audio.file.url,
      category: audio.category,
      poster: audio.poster?.url,
      date: audio.createdAt,
      owner: { name: req.user.name, id: req.user.id },
    };
  });

  res.json({ audios });
};

export const getPublicUploads: RequestHandler = async (req, res) => {
  const { page = "0", limit = "20" } = req.query as paginationQuery;
  const { profileId } = req.params;

  if (!isValidObjectId(profileId)) {
    return res.status(422).json({ message: "Invalid profile id!" });
  }

  const user = await User.findById(profileId);
  if (!user) {
    return res.status(404).json({ message: "Profile not found!" });
  }

  const data = await Audio.find({ owner: profileId })
    .skip(+page * +limit)
    .limit(+limit)
    .sort({ createdAt: -1 });

  const audios = data.map((audio) => {
    return {
      id: audio._id,
      title: audio.title,
      about: audio.about,
      file: audio.file.url,
      poster: audio.poster?.url,
      date: audio.createdAt,
      owner: { name: user.name, id: user.id },
    };
  });

  res.json({ audios });
};

export const getPublicProfile: RequestHandler = async (req, res) => {
  const { profileId } = req.params;
  if (!isValidObjectId(profileId))
    return res.status(422).json({ message: "Invalid profile id!" });

  const user = await User.findById(profileId);
  if (!user) return res.status(404).json({ message: "Profile not found!" });

  res.json({
    profile: {
      id: user._id,
      name: user.name,
      followers: user.followers.length,
      avatar: user.avatar?.url,
    },
  });
};

export const getPublicProfilePlaylist: RequestHandler = async (req, res) => {
  const { page = "0", limit = "20" } = req.query as paginationQuery;
  const { profileId } = req.params;
  if (!isValidObjectId(profileId))
    return res.status(422).json({ message: "Invalid profile id!" });

  const playlist = await Playlist.find({
    owner: profileId,
    visibility: "public",
  })
    .skip(+page * +limit)
    .limit(+limit)
    .sort({ createdAt: -1 });

  if (!playlist) {
    return res.json({ playlist: [] });
  }

  return res.json({
    playlist: playlist.map((item) => {
      return {
        id: item._id,
        title: item.title,
        itemsCount: item.items.length,
        visibility: item.visibility,
      };
    }),
  });
};

export const getRecommendedByProfile: RequestHandler = async (req, res) => {
  const user = req.user;

  let matchOptions: PipelineStage.Match = {
    $match: {
      _id: { $exists: true },
    },
  };

  if (user) {
    // send audios accoring to profile
    // console.log(user);
    // fetch users previous history
    // const userPreviousHistory = await History.aggregate([
    //   {
    //     $match: {
    //       owner: user.id,
    //     },
    //   },
    //   {
    //     $unwind: "$all",
    //   },
    //   {
    //     $match: {
    //       "all.date": {
    //         // match only those hitories which are not older than 30 days
    //         $gte: moment().subtract(30, "days").toDate(),
    //       },
    //     },
    //   },
    //   {
    //     $group: {
    //       _id: "$all.audio",
    //     },
    //   },
    //   {
    //     $lookup: {
    //       from: "audios",
    //       localField: "_id",
    //       foreignField: "_id",
    //       as: "audioInfo",
    //     },
    //   },
    //   {
    //     $unwind: "$audioInfo",
    //   },
    //   {
    //     $group: {
    //       _id: null,
    //       category: {
    //         $addToSet: "$audioInfo.category",
    //       },
    //     },
    //   },
    // ]); // in the last 30 days user is listening to these category music

    const categories = await getUsersPreviousHistory(req);

    // console.log(userPreviousHistory)

    // const categories = userPreviousHistory?.[0]?.category;

    if (categories?.length) {
      matchOptions = {
        $match: {
          category: { $in: categories },
        },
      };
    }
  }

  // send generic audios
  const audios = await Audio.aggregate([
    // {
    //   $match: {
    //     _id: { $exists: true },
    //   },
    // },
    matchOptions,
    {
      $sort: {
        "likes.count": -1,
      },
    },
    { $limit: 10 },
    {
      $lookup: {
        from: "users",
        localField: "owner",
        foreignField: "_id",
        as: "owner",
      },
    },
    {
      $unwind: "$owner",
    },
    {
      $project: {
        _id: 0,
        id: "$_id",
        title: "$title",
        category: "$category",
        about: "$about",
        file: "$file.url",
        poster: "$poster.url",
        owner: {
          id: "$owner._id",
          name: "$owner.name",
        },
      },
    },
  ]);

  res.json({ audios });
};

export const getAutoGeneratedPlaylist: RequestHandler = async (req, res) => {
  // find out 5 playlists

  // 1 mix 20

  const [result] = await History.aggregate([
    {
      $match: {
        owner: req.user.id,
      },
    },
    {
      $unwind: "$all",
    },
    { $group: { _id: "$all.audio", items: { $addToSet: "$all.audio" } } },
    { $sample: { size: 20 } },
    { $group: { _id: null, items: { $push: "$_id" } } },
  ]);

  const title = "Mix 20";

  if (result) {
    await Playlist.updateOne(
      { owner: req.user.id, title },
      { $set: { title, items: result.items, visibility: "auto" } },
      { upsert: true }
    );
  }

  // 4 will be auto generated playlist
  const categories = await getUsersPreviousHistory(req);
  let matchOptions: PipelineStage.Match = {
    $match: {
      _id: { $exists: true },
    },
  };
  if (categories?.length) {
    matchOptions = { $match: { title: { $in: categories } } };
  }

  const autogGeneratedPlay = await AutoGeneratedPlaylist.aggregate([
    matchOptions,
    { $sample: { size: 4 } },
    {
      $project: {
        _id: 0,
        id: "$_id",
        title: "$title",
        count: { $size: "$items" },
      },
    },
  ]);

  const playlist = await Playlist.findOne({ owner: req.user.id, title });

  const finalList = autogGeneratedPlay.concat({
    id: playlist?._id,
    title: playlist?.title,
    itemsCount: playlist?.items.length,
  });

  // res.json(autogGeneratedPlay);
  res.json({ playlist: finalList });
};

export const getFollowersProfile: RequestHandler = async (req, res) => {
  const { limit = "20", page = "0" } = req.query as paginationQuery;
  // console.log(limit, page);
  const [result] = await User.aggregate([
    { $match: { _id: req.user.id } },
    {
      $project: {
        followers: {
          $slice: [
            "$followers",
            parseInt(page) * parseInt(limit),
            parseInt(limit),
          ],
        },
      },
    },
    {
      $unwind: { path: "$followers" },
    },
    {
      $lookup: {
        from: "users",
        localField: "followers",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: null,
        followers: {
          $push: {
            avatar: "$userInfo.avatar.url",
            name: "$userInfo.name",
            id: "$userInfo._id",
          },
        },
      },
    },
  ]);

  if (!result) res.json({ followers: [] });

  res.json({ followers: result.followers });
};

export const getFollowingsProfile: RequestHandler = async (req, res) => {
  const { limit = "20", page = "0" } = req.query as paginationQuery;
  // console.log(limit, page);
  const [result] = await User.aggregate([
    { $match: { _id: req.user.id } },
    {
      $project: {
        followings: {
          $slice: [
            "$followings",
            parseInt(page) * parseInt(limit),
            parseInt(limit),
          ],
        },
      },
    },
    {
      $unwind: { path: "$followings" },
    },
    {
      $lookup: {
        from: "users",
        localField: "followings",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: null,
        followings: {
          $push: {
            avatar: "$userInfo.avatar.url",
            name: "$userInfo.name",
            id: "$userInfo._id",
          },
        },
      },
    },
  ]);

  if (!result) res.json({ followings: [] });

  res.json({ followings: result.followings });
};

export const getFollowersProfilePublic: RequestHandler = async (req, res) => {
  const { limit = "20", page = "0" } = req.query as paginationQuery;
  const { profileId } = req.params;

  if (!isValidObjectId(profileId)) {
    return res.status(422).json({ error: "Invalid profile id" });
  }
  // console.log(limit, page);
  const [result] = await User.aggregate([
    { $match: { _id: new Types.ObjectId(profileId) } },
    {
      $project: {
        followers: {
          $slice: [
            "$followers",
            parseInt(page) * parseInt(limit),
            parseInt(limit),
          ],
        },
      },
    },
    {
      $unwind: { path: "$followers" },
    },
    {
      $lookup: {
        from: "users",
        localField: "followers",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: null,
        followers: {
          $push: {
            avatar: "$userInfo.avatar.url",
            name: "$userInfo.name",
            id: "$userInfo._id",
          },
        },
      },
    },
  ]);

  if (!result) res.json({ followers: [] });

  res.json({ followers: result.followers });
};

export const getPlaylistAudios: RequestHandler = async (req, res) => {
  const { limit = "20", page = "0" } = req.query as paginationQuery;

  const { playlistId } = req.params;

  if (!isValidObjectId(playlistId))
    return res.status(422).json({ error: "Invalid playlist id!" });

  const aggregatationLogic = [
    {
      $match: {
        _id: new Types.ObjectId(playlistId),
        visibility: { $ne: "private" },
      },
    },
    {
      $project: {
        items: {
          $slice: ["$items", parseInt(page) * parseInt(limit), parseInt(limit)],
        },
        title: "$title",
      },
    },
    { $unwind: "$items" },
    {
      $lookup: {
        from: "audios",
        localField: "items",
        foreignField: "_id",
        as: "audios",
      },
    },
    { $unwind: "$audios" },
    {
      $lookup: {
        from: "users",
        localField: "audios.owner",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: {
          id: "$_id",
          title: "$title",
        },
        audios: {
          $push: {
            id: "$audios._id",
            title: "$audios.title",
            about: "$audios.about",
            category: "$audios.category",
            file: "$audios.file.url",
            poster: "$audios.poster.url",
            owner: { name: "$userInfo.name", id: "$userInfo._id" },
          },
        },
      },
    },
    {
      $project: {
        _id: 0,
        id: "$_id.id",
        title: "$_id.title",
        audios: "$$ROOT.audios",
      },
    },
  ];

  const [playlistResult] = await Playlist.aggregate(aggregatationLogic);
  // console.log(playlistResult);

  if (!playlistResult) {
    const autoPlaylistResult = await AutoGeneratedPlaylist.aggregate(
      aggregatationLogic
    );
    // console.log(autoGeneratedPlaylist);
    return res.json({ list: autoPlaylistResult });
  }

  res.json({ list: playlistResult });
};

export const getPrivatePlaylistAudios: RequestHandler = async (req, res) => {
  const { limit = "20", page = "0" } = req.query as paginationQuery;

  const { playlistId } = req.params;

  if (!isValidObjectId(playlistId))
    return res.status(422).json({ error: "Invalid playlist id!" });

  const aggregatationLogic = [
    {
      $match: {
        _id: new Types.ObjectId(playlistId),
        owner: req.user.id,
      },
    },
    {
      $project: {
        items: {
          $slice: ["$items", parseInt(page) * parseInt(limit), parseInt(limit)],
        },
        title: "$title",
      },
    },
    { $unwind: "$items" },
    {
      $lookup: {
        from: "audios",
        localField: "items",
        foreignField: "_id",
        as: "audios",
      },
    },
    { $unwind: "$audios" },
    {
      $lookup: {
        from: "users",
        localField: "audios.owner",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: {
          id: "$_id",
          title: "$title",
        },
        audios: {
          $push: {
            id: "$audios._id",
            title: "$audios.title",
            about: "$audios.about",
            category: "$audios.category",
            file: "$audios.file.url",
            poster: "$audios.poster.url",
            owner: { name: "$userInfo.name", id: "$userInfo._id" },
          },
        },
      },
    },
    {
      $project: {
        _id: 0,
        id: "$_id.id",
        title: "$_id.title",
        audios: "$$ROOT.audios",
      },
    },
  ];

  const [playlistResult] = await Playlist.aggregate(aggregatationLogic);

  if (!playlistResult) {
    const [autoPlaylistResult] = await AutoGeneratedPlaylist.aggregate(
      aggregatationLogic
    );
    return res.json({ list: autoPlaylistResult });
  }

  res.json({ list: playlistResult });
};

export const getIsFollowing: RequestHandler = async (req, res) => {
  const { profileId } = req.params;

  if (!isValidObjectId(profileId))
    return res.status(422).json({ error: "Invalid profile id!" });

  const user = await User.findOne({ _id: profileId, followers: req.user.id });

  res.json({ status: user ? true : false });
};
